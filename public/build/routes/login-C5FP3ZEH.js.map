{
  "version": 3,
  "sources": ["../../../app/routes/login.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/login.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/login.tsx\");\n  import.meta.hot.lastModified = \"1703020081677.389\";\n}\n// REMIX HMR END\n\nimport { UserRepository } from \"~/repositories/UserRepository\";\nimport { SessionService } from \"~/services/SessionService\";\nimport { useActionData } from \"@remix-run/react\";\nimport LoginForm from \"~/components/organisms/LoginForm\";\nexport async function action({\n  request\n}) {\n  const body = await request.formData();\n  const email = body.get(\"email\");\n  const password = body.get(\"password\");\n  if (!email || !password) {\n    return {\n      error: \"Email or password is missing\"\n    };\n  }\n  const data = await UserRepository.authenticate(email, password);\n  if (!data) {\n    return {\n      error: \"Email or password is incorrect\"\n    };\n  }\n  const {\n    jwt,\n    user\n  } = data;\n  return await SessionService.createUserSession(user.id, jwt, '/');\n}\nexport default function Login() {\n  _s();\n  const actionData = useActionData();\n  return <LoginForm error={actionData?.error} />;\n}\n_s(Login, \"fHVw5pq0Zwd2gXh2gyrnVdHnLCc=\", false, function () {\n  return [useActionData];\n});\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAmDS;AAlDT,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,2BAA6B,EAAE;AAAA,EACxE;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAsB;AACtB,cAAY,IAAI,eAAe;AACjC;AA8Be,SAAR,QAAyB;AAC9B,KAAG;AACH,QAAM,aAAa,cAAc;AACjC,SAAO,mDAAC,aAAU,OAAO,YAAY,SAA9B;AAAA;AAAA;AAAA;AAAA,SAAqC;AAC9C;AACA,GAAG,OAAO,gCAAgC,OAAO,WAAY;AAC3D,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,OAAO;AAExB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
